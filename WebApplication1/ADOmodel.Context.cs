//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApplication1
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ONLINE_DATABASE_SYSTEMEntities : DbContext
    {
        public ONLINE_DATABASE_SYSTEMEntities()
            : base("name=ONLINE_DATABASE_SYSTEMEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ApplicableStatusList> ApplicableStatusLists { get; set; }
        public virtual DbSet<ApprovalStatusList> ApprovalStatusLists { get; set; }
        public virtual DbSet<BusinessClassification> BusinessClassifications { get; set; }
        public virtual DbSet<BusinessRequirement> BusinessRequirements { get; set; }
        public virtual DbSet<ExpirationStatusList> ExpirationStatusLists { get; set; }
        public virtual DbSet<GenderTable> GenderTables { get; set; }
        public virtual DbSet<RequirementList> RequirementLists { get; set; }
        public virtual DbSet<RequirementPerClassification> RequirementPerClassifications { get; set; }
        public virtual DbSet<SubmissionStatusList> SubmissionStatusLists { get; set; }
        public virtual DbSet<Table_2> Table_2 { get; set; }
        public virtual DbSet<tbl_ProductMaster> tbl_ProductMaster { get; set; }
        public virtual DbSet<tblCountry> tblCountries { get; set; }
        public virtual DbSet<UserActivation> UserActivations { get; set; }
        public virtual DbSet<UserReg> UserRegs { get; set; }
    
        public virtual ObjectResult<PopulateAllRequirements_Result> PopulateAllRequirements(string classificationId, string businessId)
        {
            var classificationIdParameter = classificationId != null ?
                new ObjectParameter("ClassificationId", classificationId) :
                new ObjectParameter("ClassificationId", typeof(string));
    
            var businessIdParameter = businessId != null ?
                new ObjectParameter("BusinessId", businessId) :
                new ObjectParameter("BusinessId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PopulateAllRequirements_Result>("PopulateAllRequirements", classificationIdParameter, businessIdParameter);
        }
    
        public virtual ObjectResult<PopulateApplicableStatusList_Result> PopulateApplicableStatusList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PopulateApplicableStatusList_Result>("PopulateApplicableStatusList");
        }
    
        public virtual ObjectResult<PopulateApprovalStatusList_Result> PopulateApprovalStatusList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PopulateApprovalStatusList_Result>("PopulateApprovalStatusList");
        }
    
        public virtual ObjectResult<PopulateBusinessClassification_Result> PopulateBusinessClassification()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PopulateBusinessClassification_Result>("PopulateBusinessClassification");
        }
    
        public virtual ObjectResult<PopulateExpirationStatus_Result> PopulateExpirationStatus()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PopulateExpirationStatus_Result>("PopulateExpirationStatus");
        }
    
        public virtual ObjectResult<PopulateSubmissionStatusList_Result> PopulateSubmissionStatusList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PopulateSubmissionStatusList_Result>("PopulateSubmissionStatusList");
        }
    
        public virtual ObjectResult<ReportCountofBusinessPerClassification_Result> ReportCountofBusinessPerClassification()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReportCountofBusinessPerClassification_Result>("ReportCountofBusinessPerClassification");
        }
    
        public virtual ObjectResult<sp_AdminSearch_Result> sp_AdminSearch(string searchtitle, string userid)
        {
            var searchtitleParameter = searchtitle != null ?
                new ObjectParameter("searchtitle", searchtitle) :
                new ObjectParameter("searchtitle", typeof(string));
    
            var useridParameter = userid != null ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AdminSearch_Result>("sp_AdminSearch", searchtitleParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_GetAllProducts_Result> sp_GetAllProducts(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAllProducts_Result>("sp_GetAllProducts", userIdParameter);
        }
    
        public virtual ObjectResult<sp_GetbyRequirementID_Result> sp_GetbyRequirementID(Nullable<int> requirementid, string businessId)
        {
            var requirementidParameter = requirementid.HasValue ?
                new ObjectParameter("requirementid", requirementid) :
                new ObjectParameter("requirementid", typeof(int));
    
            var businessIdParameter = businessId != null ?
                new ObjectParameter("BusinessId", businessId) :
                new ObjectParameter("BusinessId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetbyRequirementID_Result>("sp_GetbyRequirementID", requirementidParameter, businessIdParameter);
        }
    
        public virtual ObjectResult<sp_GetProductID_Result> sp_GetProductID(Nullable<int> productID)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetProductID_Result>("sp_GetProductID", productIDParameter);
        }
    
        public virtual int sp_InsertorUpdateRequirement(Nullable<int> businessrequirementid, Nullable<System.DateTime> expirationdate, string expirationstatus, string applicablestatus, string serialno, string requirementId, string businessId, string approvalStatus)
        {
            var businessrequirementidParameter = businessrequirementid.HasValue ?
                new ObjectParameter("businessrequirementid", businessrequirementid) :
                new ObjectParameter("businessrequirementid", typeof(int));
    
            var expirationdateParameter = expirationdate.HasValue ?
                new ObjectParameter("expirationdate", expirationdate) :
                new ObjectParameter("expirationdate", typeof(System.DateTime));
    
            var expirationstatusParameter = expirationstatus != null ?
                new ObjectParameter("expirationstatus", expirationstatus) :
                new ObjectParameter("expirationstatus", typeof(string));
    
            var applicablestatusParameter = applicablestatus != null ?
                new ObjectParameter("applicablestatus", applicablestatus) :
                new ObjectParameter("applicablestatus", typeof(string));
    
            var serialnoParameter = serialno != null ?
                new ObjectParameter("serialno", serialno) :
                new ObjectParameter("serialno", typeof(string));
    
            var requirementIdParameter = requirementId != null ?
                new ObjectParameter("RequirementId", requirementId) :
                new ObjectParameter("RequirementId", typeof(string));
    
            var businessIdParameter = businessId != null ?
                new ObjectParameter("BusinessId", businessId) :
                new ObjectParameter("BusinessId", typeof(string));
    
            var approvalStatusParameter = approvalStatus != null ?
                new ObjectParameter("ApprovalStatus", approvalStatus) :
                new ObjectParameter("ApprovalStatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertorUpdateRequirement", businessrequirementidParameter, expirationdateParameter, expirationstatusParameter, applicablestatusParameter, serialnoParameter, requirementIdParameter, businessIdParameter, approvalStatusParameter);
        }
    
        public virtual ObjectResult<string> sp_InsertProducts(string businessName, string businessOwner, string businessAddress, string contactNumber, string email, string website, string imageLink, string userId, string classificationId, string statusId, string imageFileName)
        {
            var businessNameParameter = businessName != null ?
                new ObjectParameter("BusinessName", businessName) :
                new ObjectParameter("BusinessName", typeof(string));
    
            var businessOwnerParameter = businessOwner != null ?
                new ObjectParameter("BusinessOwner", businessOwner) :
                new ObjectParameter("BusinessOwner", typeof(string));
    
            var businessAddressParameter = businessAddress != null ?
                new ObjectParameter("BusinessAddress", businessAddress) :
                new ObjectParameter("BusinessAddress", typeof(string));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var websiteParameter = website != null ?
                new ObjectParameter("Website", website) :
                new ObjectParameter("Website", typeof(string));
    
            var imageLinkParameter = imageLink != null ?
                new ObjectParameter("ImageLink", imageLink) :
                new ObjectParameter("ImageLink", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var classificationIdParameter = classificationId != null ?
                new ObjectParameter("ClassificationId", classificationId) :
                new ObjectParameter("ClassificationId", typeof(string));
    
            var statusIdParameter = statusId != null ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(string));
    
            var imageFileNameParameter = imageFileName != null ?
                new ObjectParameter("ImageFileName", imageFileName) :
                new ObjectParameter("ImageFileName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_InsertProducts", businessNameParameter, businessOwnerParameter, businessAddressParameter, contactNumberParameter, emailParameter, websiteParameter, imageLinkParameter, userIdParameter, classificationIdParameter, statusIdParameter, imageFileNameParameter);
        }
    
        public virtual ObjectResult<string> sp_InsertUserAccount(string userName, string email, string userPassword, string userRePassword, string firstname, string lastname, string gender, Nullable<int> age, string contactNumber, string address, string imgext, string imgname, string imgpath)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var userPasswordParameter = userPassword != null ?
                new ObjectParameter("UserPassword", userPassword) :
                new ObjectParameter("UserPassword", typeof(string));
    
            var userRePasswordParameter = userRePassword != null ?
                new ObjectParameter("UserRePassword", userRePassword) :
                new ObjectParameter("UserRePassword", typeof(string));
    
            var firstnameParameter = firstname != null ?
                new ObjectParameter("Firstname", firstname) :
                new ObjectParameter("Firstname", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("Lastname", lastname) :
                new ObjectParameter("Lastname", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var ageParameter = age.HasValue ?
                new ObjectParameter("Age", age) :
                new ObjectParameter("Age", typeof(int));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var imgextParameter = imgext != null ?
                new ObjectParameter("imgext", imgext) :
                new ObjectParameter("imgext", typeof(string));
    
            var imgnameParameter = imgname != null ?
                new ObjectParameter("imgname", imgname) :
                new ObjectParameter("imgname", typeof(string));
    
            var imgpathParameter = imgpath != null ?
                new ObjectParameter("imgpath", imgpath) :
                new ObjectParameter("imgpath", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_InsertUserAccount", userNameParameter, emailParameter, userPasswordParameter, userRePasswordParameter, firstnameParameter, lastnameParameter, genderParameter, ageParameter, contactNumberParameter, addressParameter, imgextParameter, imgnameParameter, imgpathParameter);
        }
    
        public virtual ObjectResult<sp_PopulateGender_Result> sp_PopulateGender()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PopulateGender_Result>("sp_PopulateGender");
        }
    
        public virtual ObjectResult<sp_ReportListOfBusiness_Result> sp_ReportListOfBusiness()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ReportListOfBusiness_Result>("sp_ReportListOfBusiness");
        }
    
        public virtual ObjectResult<sp_Search_Result> sp_Search(string searchtitle, string userid)
        {
            var searchtitleParameter = searchtitle != null ?
                new ObjectParameter("searchtitle", searchtitle) :
                new ObjectParameter("searchtitle", typeof(string));
    
            var useridParameter = userid != null ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Search_Result>("sp_Search", searchtitleParameter, useridParameter);
        }
    
        public virtual ObjectResult<string> sp_UpdateProducts(Nullable<int> productID, string businessName, string businessOwner, string businessAddress, string contactNumber, string email, string website, string userId, string classificationId, string statusId, string imageFileName, string imageLink)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var businessNameParameter = businessName != null ?
                new ObjectParameter("BusinessName", businessName) :
                new ObjectParameter("BusinessName", typeof(string));
    
            var businessOwnerParameter = businessOwner != null ?
                new ObjectParameter("BusinessOwner", businessOwner) :
                new ObjectParameter("BusinessOwner", typeof(string));
    
            var businessAddressParameter = businessAddress != null ?
                new ObjectParameter("BusinessAddress", businessAddress) :
                new ObjectParameter("BusinessAddress", typeof(string));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var websiteParameter = website != null ?
                new ObjectParameter("Website", website) :
                new ObjectParameter("Website", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var classificationIdParameter = classificationId != null ?
                new ObjectParameter("ClassificationId", classificationId) :
                new ObjectParameter("ClassificationId", typeof(string));
    
            var statusIdParameter = statusId != null ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(string));
    
            var imageFileNameParameter = imageFileName != null ?
                new ObjectParameter("ImageFileName", imageFileName) :
                new ObjectParameter("ImageFileName", typeof(string));
    
            var imageLinkParameter = imageLink != null ?
                new ObjectParameter("ImageLink", imageLink) :
                new ObjectParameter("ImageLink", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_UpdateProducts", productIDParameter, businessNameParameter, businessOwnerParameter, businessAddressParameter, contactNumberParameter, emailParameter, websiteParameter, userIdParameter, classificationIdParameter, statusIdParameter, imageFileNameParameter, imageLinkParameter);
        }
    
        public virtual ObjectResult<Userlogin_Result> Userlogin(string email, string password)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Userlogin_Result>("Userlogin", emailParameter, passwordParameter);
        }
    
        public virtual ObjectResult<string> sp_InsertUserActivation(Nullable<int> userId, Nullable<System.Guid> activationCode)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var activationCodeParameter = activationCode.HasValue ?
                new ObjectParameter("ActivationCode", activationCode) :
                new ObjectParameter("ActivationCode", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_InsertUserActivation", userIdParameter, activationCodeParameter);
        }
    
        public virtual ObjectResult<string> sp_UserAccountEmailConfirmed(Nullable<System.Guid> activationCode)
        {
            var activationCodeParameter = activationCode.HasValue ?
                new ObjectParameter("activationCode", activationCode) :
                new ObjectParameter("activationCode", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_UserAccountEmailConfirmed", activationCodeParameter);
        }

        public System.Data.Entity.DbSet<WebApplication1.Models.LoginModelClass> LoginModelClasses { get; set; }
    }
}
