@model WebApplication1.Models.RequirementsModel

@{
    ViewBag.Title = "EditRequirements";
}

<h2>Update Requirement</h2>

@using (Html.BeginForm("EditRequirements", "Requirement", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">


    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.BusinessRequirementId)
    @Html.HiddenFor(model => model.BusinessId)
    @Html.HiddenFor(model => model.RequirementId)
    @Html.HiddenFor(model => model.imgpath)


    <div class="form-group">
        @Html.LabelFor(model => model.ApplicableStatus, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <div class="checkbox">
                @Html.EditorFor(model => model.ApplicableStatus)
                @Html.ValidationMessageFor(model => model.ApplicableStatus, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    @*//=======image======*@
    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            @if (Model.imgpath == "" || Model.imgpath == null)
            {
                Model.imgpath = "~/RequirementImages/requirementdefaultpic.jpg";

            }
            <img src="@Url.Content(Model.imgpath)" alt="preview" id="imagePreview" style="border-radius:5%; border: 12px solid hotpink; height: 200px; width: 150px; display: block;" class="form-control" />

        </div>
    </div>


    <div class="form-group">
        <label class="control-label col-md-2">Profile Picture</label>
        <div class="col-md-10">
            <lablel>Max Image file Size: 2MB</lablel><br />
            <input type="file" name="file" value="" onchange="return ShowImagePreview(this)" class="form-control" id="fileupload" />
            @Html.ValidationMessageFor(model => model.file, null, new { @class = "text-danger" })

        </div>
    </div>
    @*=============image=========*@

    <div class="form-group">
        @Html.LabelFor(model => model.Requirement, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Requirement, new { htmlAttributes = new { @readonly = "readonly", @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Requirement, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.SerialNo, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.SerialNo, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.SerialNo, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ExpirationStatus, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <div class="checkbox">
                @Html.EditorFor(model => model.ExpirationStatus)
                @Html.ValidationMessageFor(model => model.ExpirationStatus, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ExpirationDate, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.ExpirationDate, new { htmlAttributes = new { @readonly = "readonly", @class = "datepicker form-control" } })
            @*@Html.EditorFor(model => model.ExpirationDate, new { htmlAttributes = new { @class = "datepicker form-control", @onclick = "disableTxt()" } })*@
            @Html.ValidationMessageFor(model => model.ExpirationDate, "", new { @class = "text-danger" })
        </div>
    </div>

    @if (Session["accountrole"].ToString() == "TourismAdminRole")
    {
        <div class="form-group">
            @Html.LabelFor(model => model.ApprovalStatus, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">

                @Html.DropDownListFor(model => model.ApprovalStatus, Model.ApprovalStatusList, "--Select Status--", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ApprovalStatus, "", new { @class = "text-danger" })

            </div>
        </div>
    }
    else
    {
        @Html.HiddenFor(model => model.ApprovalStatus)
    }

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Save" class="btn btn-default" />
        </div>
    </div>
</div>
}

@*Session["ClassificationId"] = ClassificationId;
    Session["businessid"] = businessid;*@
<div>
    @Html.ActionLink("Back to List of Requirements", "ListOfRequirements", new { ClassificationId = Session["ClassificationId"], businessid = Session["businessid"] })
</div>

<link href="~/Content/themes/base/jquery-ui.min.css" rel="stylesheet" />
@section scripts
{
    <script src="~/Scripts/jquery-ui-1.13.2.min.js"></script>
    <script>
        $(document).ready(function () {
            $(".datepicker").datepicker({
                dateFormat: "dd-mm-yy",
                changemonth: true,
                changeyear: true
            });
        });
    </script>

    <script>
            function ShowImagePreview(input) {

                debugger;
                if (input.files && input.files[0]) {
                    var fname = input.files[0].name;

                    var filesize = input.files[0].fsize;
                    var size = parseFloat(input.files[0].size).toFixed(2);
                    //alert(size);
                    //var Maxvalue = 1048576;
                    var Maxvalue = 2121592;
                    if (size > Maxvalue) {
                        //alert(Maxvalue);
                        alert("Image Size is too large!");
                        $("#fileupload").val("");

                        return false;
                    }

                    var re = /(\.jpg|\.jpeg|\.bmp|\.gif|\.png)$/i;
                    if (!re.exec(fname)) {
                        alert("Image not supported!");
                        $("#fileupload").val("");

                        return false;
                    }
                    else {
                        //document.getElementById("ImagePath").textContent = "asa";

                        var reader = new FileReader();
                        reader.onload = function (e) {
                            $('#imagePreview').prop('src', e.target.result);

                            //$('#ImagePath').val("Imageuploaded");
                            //$('#ImagePath').val(filesize);
                            //$('#imagePreview').text =
                        };
                        reader.readAsDataURL(input.files[0]);
                    }
                }
            }
        </script>


    @Scripts.Render("~/bundles/jqueryval")
}

