@model WebApplication1.Models.LoginModelClass

@{
    ViewBag.Title = "Edit User Account";
}

<h2>EditUserAccount</h2>

@using (Html.BeginForm("EditUserAccount", "UserLogin", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        @*<h4>LoginModelClass</h4>*@
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Userid)
        @Html.HiddenFor(model => model.imgname)
        @Html.HiddenFor(model => model.imgext)
        @Html.HiddenFor(model => model.imgpath)

        @*//=======image*@
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                @if (Model.imgpath == "" || Model.imgpath == null)
                {
                    Model.imgpath = "~/UserImages/UserDefaultPic.png";

                }
                <img src="@Url.Content(Model.imgpath)" alt="preview" id="imagePreview" style="border-radius:50%; border: 12px solid hotpink; height: 169px; width: 176px; display: block;" class="form-control" />

            </div>
        </div>


        <div class="form-group">
            <label class="control-label col-md-2">Profile Picture</label>
            <div class="col-md-10">
                <lablel>Max Image file Size: 2MB</lablel><br />
                <input type="file" name="file" value="" onchange="return ShowImagePreview(this)" class="form-control" id="fileupload" />
                @Html.ValidationMessageFor(model => model.file, null, new { @class = "text-danger" })

            </div>
        </div>
        @*=============image*@

    <script>
        function ShowImagePreview(input) {

            debugger;
            if (input.files && input.files[0]) {
                var fname = input.files[0].name;

                var filesize = input.files[0].fsize;
                var size = parseFloat(input.files[0].size).toFixed(2);
                //alert(size);
                //var Maxvalue = 1048576;
                var Maxvalue = 2121592;
                if (size > Maxvalue) {
                    //alert(Maxvalue);
                    alert("Image Size is too large!");
                    $("#fileupload").val("");

                    return false;
                }

                var re = /(\.jpg|\.jpeg|\.bmp|\.gif|\.png)$/i;
                if (!re.exec(fname)) {
                    alert("Image not supported!");
                    $("#fileupload").val("");

                    return false;
                }
                else {
                    //document.getElementById("ImagePath").textContent = "asa";

                    var reader = new FileReader();
                    reader.onload = function (e) {
                        $('#imagePreview').prop('src', e.target.result);

                        //$('#ImagePath').val("Imageuploaded");
                        //$('#ImagePath').val(filesize);
                        //$('#imagePreview').text =
                    };
                    reader.readAsDataURL(input.files[0]);
                }
            }
        }
    </script>
        @*//============PREVIEW IMAGE END==============*@

        <div class="form-group">
            @Html.LabelFor(model => model.Lastname, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Lastname, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Lastname, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Firstname, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Firstname, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Firstname, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.genderid, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.genderid, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.genderid, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Age, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Age, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Age, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ContactNumber, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ContactNumber, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ContactNumber, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.UserName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.UserName, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.UserRePassword, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.UserRePassword, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.UserRePassword, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>

    </div>
    //</div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}